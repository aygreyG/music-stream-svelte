// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // If you want to use Prisma Migrate, you will need to manually create a shadow database
  // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
  // make sure to append ?connect_timeout=10 to the connection string
  // shadowDatabaseUrl = env(“SHADOW_DATABASE_URL”)
}

model User {
  id        String     @id @default(uuid())
  admin     Boolean    @default(false)
  email     String     @unique
  username  String     @unique
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  listened  Listened[]
  playlists Playlist[]
}

model Album {
  id            String   @id @default(uuid())
  title         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  releaseDate   String?
  albumArt      String?
  albumArtLarge String?
  albumArtistId String
  albumArtist   Artist   @relation(fields: [albumArtistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tracks        Track[]

  @@unique([title, albumArtistId])
}

model Track {
  id          String     @id @default(uuid())
  title       String
  length      Int
  trackNumber Int
  filePath    String     @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  albumId     String
  album       Album      @relation(fields: [albumId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  artists     Artist[]
  listened    Listened[]
  playlists   Playlist[]
  tags        Tag[]
}

model Artist {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tracks    Track[]
  albums    Album[]
}

model Listened {
  id            String   @id @default(uuid())
  listeningTime Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  trackId       String
  track         Track    @relation(fields: [trackId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Playlist {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tracks    Track[]
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tracks    Track[]
}

model ServerSettings {
  id            String       @id @default(uuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  musicFolder   String
  setupComplete Boolean      @default(false)
  folderScans   FolderScan[]
}

model FolderScan {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  scanLength       Float /// The length of the scan in seconds
  newTracks        Int
  serverSettingsId String
  serverSettings   ServerSettings @relation(fields: [serverSettingsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
